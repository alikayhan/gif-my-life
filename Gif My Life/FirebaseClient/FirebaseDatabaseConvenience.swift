//
//  FirebaseDatabaseConvenience.swift
//  Gif My Life
//
//  Created by Ali Kayhan on 24/06/2017.
//  Copyright Â© 2017 Ali Kayhan. All rights reserved.
//

import Foundation
import FirebaseDatabase

// MARK: - FirebaseClient (Convenient Resource Methods - Database)

extension FirebaseClient {
    
    // MARK: - Properties
    var database: Database! {
        get {
            return Database.database()
        }
    }
    
    var ref: DatabaseReference! {
        // Since extensions may not contain stored properties but can add computed properties,
        // getter is overridden to assign a database reference to "ref" property
        get {
            return Database.database().reference()
        }
    }
    
    // MARK: - Convenient Resource Methods - Database
    func setPersistenceEnabled(to enabled: Bool) {
        Database.database().isPersistenceEnabled = enabled
    }

    func save(_ data: [String: Any], to pathString: String) {
        ref.child(pathString).setValue(data)
    }

    func save(_ data: [String: Any], toAutoGeneratedChildOf pathString: String) {
        ref.child(pathString).childByAutoId().setValue(data)
    }

    func update(childValuesOf pathString: String, with data: [String: Any]) {
        ref.child(pathString).updateChildValues(data)
    }

    func update(childValuesWith childUpdates: [String: Any]) {
        ref.updateChildValues(childUpdates)
    }

    func deleteData(at pathString: String) {
        ref.child(pathString).removeValue()
    }

    func readData(at pathString: String, andHandleCompletionWith completionHandler: @escaping (DataSnapshot) -> Void) {
        ref.child(pathString).observeSingleEvent(of: .value) { (snapshot) in
            completionHandler(snapshot)
        }
    }

    func listenForAllData(at pathString: String, andHandleCompletionWith completionHandler: @escaping (DataSnapshot) -> Void) {
        refHandle = ref.child(pathString).observe(.value) { (snapshot) in
            completionHandler(snapshot)
        }
    }

    func listenForAddedData(at pathString: String, sortingBy child: String? = nil, andHandleCompletionWith completionHandler: @escaping (DataSnapshot) -> Void) {
        if child != nil {
            refHandle = ref.child(pathString).queryOrdered(byChild: child!).observe(.childAdded) { (snapshot) in
                completionHandler(snapshot)
            }
        } else {
            refHandle = ref.child(pathString).observe(.childAdded) { (snapshot) in
                completionHandler(snapshot)
            }
        }
    }

    func listenForRemovedData(at pathString: String, andHandleCompletionWith completionHandler: @escaping (DataSnapshot) -> Void) {
        refHandle = ref.child(pathString).observe(.childRemoved) { (snapshot) in
            completionHandler(snapshot)
        }
    }

    func listenForChangedData(at pathString: String, andHandleCompletionWith completionHandler: @escaping (DataSnapshot) -> Void) {
        refHandle = ref.child(pathString).observe(.childChanged) { (snapshot) in
            completionHandler(snapshot)
        }
    }

    func stopListeningForData(at pathString: String) {
        ref.child(pathString).removeAllObservers()
    }
}
